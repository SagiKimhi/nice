NDSummary.OnToolTipsLoaded("File:nice_defines.svh",{461:"<div class=\"NDToolTip TMacro LSystemVerilog\"><div id=\"NDPrototype461\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><div class=\"PParameterCells\" data-WideColumnCount=\"3\" data-NarrowColumnCount=\"2\"><div class=\"PBeforeParameters\" data-WideGridArea=\"1/1/2/2\" data-NarrowGridArea=\"1/1/2/3\" style=\"grid-area:1/1/2/2\">`ifndef nice_check `define nice_check(</div><div class=\"PName InFirstParameterColumn InLastParameterColumn\" data-WideGridArea=\"1/2/2/3\" data-NarrowGridArea=\"2/1/3/2\" style=\"grid-area:1/2/2/3\">condition</div><div class=\"PAfterParameters\" data-WideGridArea=\"1/3/2/4\" data-NarrowGridArea=\"3/1/4/3\" style=\"grid-area:1/3/2/4\">) \\ <span class=\"SHKeyword\">if</span> (!(condition)) <span class=\"SHKeyword\">begin</span> \\ `nice_error((<span class=\"SHString\">&quot;Check failed: %s&quot;</span>, `<span class=\"SHString\">&quot;``condition`&quot;</span>)) \\ <span class=\"SHKeyword\">end</span></div></div></div></div><div class=\"TTSummary\">Evaluates CONDITION as an expression and reports a uvm_error if the expression evaluates to false/0, similar to an assertion, but uses uvm reporting mechanism instead of the standard builtin assertion error.</div></div>",462:"<div class=\"NDToolTip TMacro LSystemVerilog\"><div id=\"NDPrototype462\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><div class=\"PParameterCells\" data-WideColumnCount=\"3\" data-NarrowColumnCount=\"2\"><div class=\"PBeforeParameters\" data-WideGridArea=\"1/1/2/2\" data-NarrowGridArea=\"1/1/2/3\" style=\"grid-area:1/1/2/2\">`ifndef nice_ensure `define nice_ensure(</div><div class=\"PName InFirstParameterColumn InLastParameterColumn\" data-WideGridArea=\"1/2/2/3\" data-NarrowGridArea=\"2/1/3/2\" style=\"grid-area:1/2/2/3\">condition</div><div class=\"PAfterParameters\" data-WideGridArea=\"1/3/2/4\" data-NarrowGridArea=\"3/1/4/3\" style=\"grid-area:1/3/2/4\">) \\ <span class=\"SHKeyword\">if</span> (!(condition)) <span class=\"SHKeyword\">begin</span> \\ `nice_ftl((<span class=\"SHString\">&quot;Check failed: %s&quot;</span>, `<span class=\"SHString\">&quot;``condition`&quot;</span>)) \\ <span class=\"SHKeyword\">end</span></div></div></div></div><div class=\"TTSummary\">Evaluates CONDITION as an expression and reports a uvm_fatal if the expression evaluates to false/0, similar to an assertion, but uses uvm reporting mechanism instead of the standard builtin assertion error.</div></div>",463:"<div class=\"NDToolTip TMacro LSystemVerilog\"><div id=\"NDPrototype463\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><div class=\"PParameterCells\" data-WideColumnCount=\"3\" data-NarrowColumnCount=\"2\"><div class=\"PBeforeParameters\" data-WideGridArea=\"1/1/2/2\" data-NarrowGridArea=\"1/1/2/3\" style=\"grid-area:1/1/2/2\">`ifndef nice_error `define nice_error(</div><div class=\"PName InFirstParameterColumn InLastParameterColumn\" data-WideGridArea=\"1/2/2/3\" data-NarrowGridArea=\"2/1/3/2\" style=\"grid-area:1/2/2/3\">sformatf_msg</div><div class=\"PAfterParameters\" data-WideGridArea=\"1/3/2/4\" data-NarrowGridArea=\"3/1/4/3\" style=\"grid-area:1/3/2/4\">) \\ `sp_err($sformatf``sformatf_msg)</div></div></div></div><div class=\"TTSummary\">Formats sformatf_msg with $sformatf and reports it as uvm error using `sp_err macro invocation.</div></div>",464:"<div class=\"NDToolTip TMacro LSystemVerilog\"><div id=\"NDPrototype464\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><div class=\"PParameterCells\" data-WideColumnCount=\"3\" data-NarrowColumnCount=\"2\"><div class=\"PBeforeParameters\" data-WideGridArea=\"1/1/2/2\" data-NarrowGridArea=\"1/1/2/3\" style=\"grid-area:1/1/2/2\">`ifndef nice_ftl `define nice_ftl(</div><div class=\"PName InFirstParameterColumn InLastParameterColumn\" data-WideGridArea=\"1/2/2/3\" data-NarrowGridArea=\"2/1/3/2\" style=\"grid-area:1/2/2/3\">sformatf_msg</div><div class=\"PAfterParameters\" data-WideGridArea=\"1/3/2/4\" data-NarrowGridArea=\"3/1/4/3\" style=\"grid-area:1/3/2/4\">) \\ `sp_ftl($sformatf``sformatf_msg)</div></div></div></div><div class=\"TTSummary\">Formats sformatf_msg with $sformatf and reports it as uvm fatal using `sp_ftl macro invocation.</div></div>",465:"<div class=\"NDToolTip TMacro LSystemVerilog\"><div id=\"NDPrototype465\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><div class=\"PParameterCells\" data-WideColumnCount=\"3\" data-NarrowColumnCount=\"2\"><div class=\"PBeforeParameters\" data-WideGridArea=\"1/1/2/2\" data-NarrowGridArea=\"1/1/2/3\" style=\"grid-area:1/1/2/2\">`ifndef nice_print `define nice_print(</div><div class=\"PName InFirstParameterColumn InLastParameterColumn\" data-WideGridArea=\"1/2/2/3\" data-NarrowGridArea=\"2/1/3/2\" style=\"grid-area:1/2/2/3\">sformatf_msg</div><div class=\"PAfterParameters\" data-WideGridArea=\"1/3/2/4\" data-NarrowGridArea=\"3/1/4/3\" style=\"grid-area:1/3/2/4\">) \\ `sp_print($sformatf``sformatf_msg)</div></div></div></div><div class=\"TTSummary\">Formats sformatf_msg with $sformatf and reports it as uvm print using `sp_print macro invocation (uses UVM_print verbosity).</div></div>",466:"<div class=\"NDToolTip TMacro LSystemVerilog\"><div id=\"NDPrototype466\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><div class=\"PParameterCells\" data-WideColumnCount=\"3\" data-NarrowColumnCount=\"2\"><div class=\"PBeforeParameters\" data-WideGridArea=\"1/1/2/2\" data-NarrowGridArea=\"1/1/2/3\" style=\"grid-area:1/1/2/2\">`ifndef nice_info `define nice_info(</div><div class=\"PName InFirstParameterColumn InLastParameterColumn\" data-WideGridArea=\"1/2/2/3\" data-NarrowGridArea=\"2/1/3/2\" style=\"grid-area:1/2/2/3\">sformatf_msg</div><div class=\"PAfterParameters\" data-WideGridArea=\"1/3/2/4\" data-NarrowGridArea=\"3/1/4/3\" style=\"grid-area:1/3/2/4\">) \\ `sp_info($sformatf``sformatf_msg)</div></div></div></div><div class=\"TTSummary\">Formats sformatf_msg with $sformatf and reports it as uvm info using `sp_info macro invocation (uses UVM_INFO verbosity).</div></div>",467:"<div class=\"NDToolTip TMacro LSystemVerilog\"><div id=\"NDPrototype467\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><div class=\"PParameterCells\" data-WideColumnCount=\"3\" data-NarrowColumnCount=\"2\"><div class=\"PBeforeParameters\" data-WideGridArea=\"1/1/2/2\" data-NarrowGridArea=\"1/1/2/3\" style=\"grid-area:1/1/2/2\">`ifndef nice_debug `define nice_debug(</div><div class=\"PName InFirstParameterColumn InLastParameterColumn\" data-WideGridArea=\"1/2/2/3\" data-NarrowGridArea=\"2/1/3/2\" style=\"grid-area:1/2/2/3\">sformatf_msg</div><div class=\"PAfterParameters\" data-WideGridArea=\"1/3/2/4\" data-NarrowGridArea=\"3/1/4/3\" style=\"grid-area:1/3/2/4\">) \\ `sp_debug($sformatf``sformatf_msg)</div></div></div></div><div class=\"TTSummary\">Formats sformatf_msg with $sformatf and reports it as uvm debug info using `sp_debug macro invocation (uses UVM_DEBUG verbosity).</div></div>",468:"<div class=\"NDToolTip TGroup LSystemVerilog\"><div class=\"TTSummary\">Simply put, X-Macros is a shorthand for &quot;Execute-Macro&quot;, and thats exactly what it does. It provides a mean for executing a user-defined operation on a pre-defined set of &quot;things&quot;.</div></div>",469:"<div class=\"NDToolTip TMacro LSystemVerilog\"><div id=\"NDPrototype469\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><div class=\"PParameterCells\" data-WideColumnCount=\"3\" data-NarrowColumnCount=\"2\"><div class=\"PBeforeParameters\" data-WideGridArea=\"1/1/2/2\" data-NarrowGridArea=\"1/1/2/3\" style=\"grid-area:1/1/2/2\">`ifndef nice_x `define nice_x(</div><div class=\"PName InFirstParameterColumn InLastParameterColumn\" data-WideGridArea=\"1/2/2/3\" data-NarrowGridArea=\"2/1/3/2\" style=\"grid-area:1/2/2/3\">operation</div><div class=\"PAfterParameters\" data-WideGridArea=\"1/3/2/4\" data-NarrowGridArea=\"3/1/4/3\" style=\"grid-area:1/3/2/4\">) \\ ```operation(api) \\ ```operation(collections) \\ ```operation(components) \\ ```operation(iterators) \\ ```operation(proxies) \\ ```operation(seq) \\ ```operation(io)</div></div></div></div><div class=\"TTSummary\">An X-Macro to run an operation against all sub-package namespaces of nice_pkg</div></div>"});